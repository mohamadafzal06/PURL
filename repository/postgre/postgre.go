package postgres

import (
	"context"
	"database/sql"
	"fmt"

	_ "github.com/lib/pq"
	"github.com/mohamadafzal06/purl/entity"
)

type Postgres struct {
	db *sql.DB
}

func NewDB(username, password, host, port, dbname string) (*Postgres, error) {
	connectionStr := fmt.Sprintf("postgres://%s:%s@%s:%s/%s?sslmode=disable", username, password, host, port, dbname)
	db, err := sql.Open("postgres", connectionStr)
	if err != nil {
		return nil, err
	}
	return &Postgres{db}, nil
}

func (p *Postgres) GetLongURL(ctx context.Context, surl entity.URL) (entity.URL, error) {
	row := p.db.QueryRowContext(ctx, "select url from ulrs where key=$1", surl.Key)
	if err := row.Err(); err != nil {
		// TODO: change the return value witht another entity.URL
		return surl, fmt.Errorf("cannot retrieve this url: %w\n", err)
	}

	var lurl entity.URL
	err := row.Scan(&lurl)
	if err != nil {
		// TODO: change the return value witht another entity.URL
		return surl, fmt.Errorf("cannot return this url when scanning: %w\n", err)
	}
	return lurl, nil
}

func (p *Postgres) SetShortURL(ctx context.Context, lurl entity.URL) (entity.URL, error) {
	res, err := p.db.ExecContext(ctx, "insert into ulrs (key, url) values ($1, $2)", lurl.Key, lurl.LURL)
	if err != nil {
		// TODO: change the return value witht another entity.URL
		return lurl, fmt.Errorf("cannot set this url into db: %w\n", err)
	}

	id, err := res.LastInsertId()
	if err != nil {
		// TODO: change the return value witht another entity.URL
		return lurl, fmt.Errorf("cannot get id generated by the db: %w\n", err)
	}
	lurl.ID = uint(id)
	// TODO: change the return value witht another entity.URL
	return lurl, nil
}
